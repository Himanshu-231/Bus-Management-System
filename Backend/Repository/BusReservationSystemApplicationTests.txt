package com.lti;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.lti.entity.BusDetails;
import com.lti.entity.BusRoute;
import com.lti.entity.BusType;
import com.lti.entity.Registration;
import com.lti.entity.Reservation;
import com.lti.repo.Repository;
import com.lti.repo.RepositoryImpl;
import com.sun.el.parser.ParseException;

@SpringBootTest
class BusReservationSystemApplicationTests {
	@Autowired
	Repository obj;

	@Test
	void contextLoads() {
		BusType newBus = new BusType();
		newBus.setBusName("Rajrath");
		newBus.setBusStatus("Status");
		newBus.setType("Driver");
		
		obj.addBusType(newBus);
	}
	@Test
	void contextLoads1() {
		obj.updateBusStatus("Raj", "active");
		
	}
	
	@Test
	void contextLoads2() {
		obj.deleteBus("Deepmala");		
	}
	
	@Test
	void contextLoads3() {
		BusType newBus = new BusType();
		newBus= obj.getBusType("Rajrath");	
		System.out.println(newBus.getBusName());
		System.out.println(newBus.getBusStatus());
		System.out.println(newBus.getType());
	}
	
	@Test    //add bus details
	void contextLoads4() {
		BusType newBus = new BusType();
		newBus.setBusName("Deepmala");
		newBus.setBusStatus("Status");
		newBus.setType("Driver");
		
		BusDetails busDetails=new BusDetails();
		busDetails.setRouteNo(1);
		busDetails.setNewBusName(newBus);
		obj.addBusType(newBus);
		obj.addBusDetails(busDetails);
	}
	
	@Test
	void contextLoads5() {
		obj.deleteBusDetails(1);			
	}
	

	@Test
	void contextLoads6() {
		obj.updateBusDetails(1, "Rajrath");			
	}
	
	@Test
	void contextLoads7() {					
		BusDetails busDetails= obj.getBus(1);
		System.out.println(busDetails.getNewBusName().getBusName());
		System.out.println(busDetails.getRouteNo());
	}
	

	@Test
	void contextLoads8() {
		BusRoute busRoute = new BusRoute();
		busRoute.setBusNo(101);
		busRoute.setDestination("pune");
		busRoute.setDistance(100);
		busRoute.setFare(500);
		busRoute.setReachTime("9:00 Am");
		busRoute.setSource("delhi");
		busRoute.setStartTime("7:00 Am");
		
		BusDetails busDetails= obj.getBus(1);
		
		busRoute.setNewBusDetails(busDetails);
		obj.addRoute(busRoute);
	}
	

	@Test
	void contextLoads9() {
		obj.deleteRoute(21);
	}
	
	@Test
	void contextLoads10() {
		BusRoute busRoute=obj.getRouteDetails(22);
		System.out.println(busRoute.getBusNo());
		System.out.println(busRoute.getSource());
		System.out.println(busRoute.getDestination());
		System.out.println(busRoute.getStartTime());
		System.out.println(busRoute.getReachTime());
		System.out.println(busRoute.getFare());
	}
	
	
	@Test				
	void contextLoads11() {
		obj.addUnAuthorizedUser("garghimanshu76@gmail.com", "7409876543");
	}
	
	
	@Test			
	void contextLoads12() {
		Registration regis=new Registration();
		regis.setEmail("garghian@gmail.com");
		regis.setFirstName("anupam");
		regis.setLastName("singh");
		regis.setPassword("1245@him");
		regis.setPhone("7409876543210");
		
		obj.addRegistration(regis);
	}
	

	@Test			
	void contextLoads13() {
		obj.updateBookedTicket("garghimanshu76@gmail.com",4);
	}
	
	@Test			
	void contextLoads14() {
		int a= (int) obj.getWallet("garghimanshu76@gmail.com");
		System.out.println(a);
	}
	
	/*@Test		//error in writing date	    //testing in service layer
	void contextLoads15() {
		obj.updateUserDetails("garghimanshu76@gmail.com", "", "male");
	}*/
	
	@Test			
	void contextLoads16() {
		String pass=obj.updatePassword("garghimanshu76@gmail.com");
		System.out.println(pass);
	}

	@Test		
	void contextLoads17() {
		obj.forgotPassword("garghimanshu76@gmail.com", "Upes@123");
	}
	
	@Test		
	void contextLoads18() {
		
		List<Registration> str= obj.noBookedTicket();
		for(Registration i: str) {
			System.out.println(i.getEmail());
		}
	}
	
	@Test		
	void contextLoads19() {
		String pass=obj.login("garghimanshu76@gmail.com");
		System.out.println(pass);
	}
	
	@Test		
	void contextLoads20() {
		double money=obj.walletBalance("garghimanshu76@gmail.com");
		System.out.println(money);
	}
	
	@Test		
	void contextLoads21() {
		Registration regis= obj.userRegistrationDetails("Anupam@gmail.com");
		System.out.println(regis.getFirstName());
		System.out.println(regis.getEmail());
		System.out.println(regis.getLastName());
		System.out.println(regis.getPhone());
	}
	
	@Test		
	void contextLoads22() {
		obj.updateWallet("Anupam@gmail.com", 1000);
	}
	
	@Test		
	void contextLoads23() throws java.text.ParseException, ParseException {
		SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy");
        java.sql.Date sqlDate = null;
        String date = "28-08-2020";
        if( !date.isEmpty()) {
             java.util.Date normalDate = sdf1.parse(date);
			 sqlDate = new java.sql.Date(normalDate.getTime());
         }
        java.sql.Date sqlDate1 = null;
        String date1 = "23-08-2020";
        if( !date1.isEmpty()) {
             java.util.Date normalDate = sdf1.parse(date1);
			 sqlDate1 = new java.sql.Date(normalDate.getTime());
         }
        BusRoute busRoute=new BusRoute();
        busRoute.setPathNo(22);
        
	     	Reservation res=new Reservation();
			res.setSeatNo(92);
			res.setTicketStatus("book");
			res.setDateOfJourney(sqlDate);
			res.setBookingDate(sqlDate1);
			res.setNewRoute(busRoute);
			obj.addReservation(res);
		   }
		
	
	
	@Test		
	void contextLoads24() throws java.text.ParseException, ParseException  {
		SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy");
        java.sql.Date sqlDate = null;
        String date = "24-08-2020";
        if( !date.isEmpty()) {
             java.util.Date normalDate = sdf1.parse(date);
			 sqlDate = new java.sql.Date(normalDate.getTime());
         }
		obj.update(47, "cancel", sqlDate, 400);
		
	}
	
	@Test		
	void contextLoads25() throws java.text.ParseException {	
		SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy");
        java.sql.Date sqlDate = null;
        String date = "25-08-2020";
        if( !date.isEmpty()) {
             java.util.Date normalDate = sdf1.parse(date);
			 sqlDate = new java.sql.Date(normalDate.getTime());
         }
        java.sql.Date sqlDate1 = null;
        String date1 = "26-08-2020";
        if( !date1.isEmpty()) {
             java.util.Date normalDate = sdf1.parse(date1);
			 sqlDate1 = new java.sql.Date(normalDate.getTime());
         }
		double i= obj.lastMonthProfit(sqlDate, sqlDate1);
		System.out.println("profit is: "+i);
	}
	
	@Test		
	void contextLoads26() throws java.text.ParseException {	
		SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy");
        java.sql.Date sqlDate = null;
        String date = "25-08-2020";
        if( !date.isEmpty()) {
            java.util.Date normalDate = sdf1.parse(date);
			 sqlDate = new java.sql.Date(normalDate.getTime());
        }
        List<Reservation> str= obj.dailyBooked(sqlDate);
        for(Reservation i: str) {
        	System.out.println(i.getTicketNo());
        }
	}
	
	@Test		
	void contextLoads27() throws java.text.ParseException {	
		SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy");
        java.sql.Date sqlDate = null;
        String date = "25-08-2020";
        if( !date.isEmpty()) {
            java.util.Date normalDate = sdf1.parse(date);
			 sqlDate = new java.sql.Date(normalDate.getTime());
        }
        java.sql.Date sqlDate1 = null;
        String date1 = "28-08-2020";
        if( !date1.isEmpty()) {
            java.util.Date normalDate = sdf1.parse(date1);
			 sqlDate1 = new java.sql.Date(normalDate.getTime());
        }
        List<Reservation> str= obj.weeklyBooked(sqlDate, sqlDate1);
        for(Reservation i: str) {
        	System.out.println(i.getTicketNo());
        }
	}
	
	@Test		
	void contextLoads28() throws java.text.ParseException {	
		SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy");
        java.sql.Date sqlDate = null;
        String date = "25-08-2020";
        if( !date.isEmpty()) {
            java.util.Date normalDate = sdf1.parse(date);
			 sqlDate = new java.sql.Date(normalDate.getTime());
        }
        java.sql.Date sqlDate1 = null;
        String date1 = "27-08-2020";
        if( !date1.isEmpty()) {
            java.util.Date normalDate = sdf1.parse(date1);
			 sqlDate1 = new java.sql.Date(normalDate.getTime());
        }
        List<Reservation> str= obj.monthlyBooked(sqlDate, sqlDate1);
        for(Reservation i: str) {
        	System.out.println(i.getTicketNo());
        }
	}
	
	@Test		
	void contextLoads29() {		
		String[] str= obj.searchTicket(51); 
		System.out.println(str[0]);
		System.out.println(str[1]);
		System.out.println(str[2]);
		System.out.println(str[3]);
		System.out.println(str[4]);
		System.out.println(str[5]);
		System.out.println(str[6]);
		System.out.println(str[7]);
		System.out.println(str[8]);
		System.out.println(str[9]);
	}
	@Test		
	void contextLoads30() throws java.text.ParseException {
		SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy");
        java.sql.Date sqlDate = null;
        String date = "25-08-2020";
        if( !date.isEmpty()) {
            java.util.Date normalDate = sdf1.parse(date);
			 sqlDate = new java.sql.Date(normalDate.getTime());
        }
		obj.cancelTicket(52, sqlDate); 
	}
	
	@Test		
	void contextLoads31() {			//error
		int i= obj.mostPreferredBus();
		System.out.println("Bus : " + i);
	}
	
	@Test		
	void contextLoads32() {			
		String[] str= obj.frequentTravelRoute();
		System.out.println("Bus : " + str[0]);
		System.out.println("Bus : " + str[1]);
	}
	
	@Test		
	void contextLoads33() {			
		List<String[]> availableBuses = obj.availableSeats();
		for(String[] bus:availableBuses) {
			for(int i=0;i<bus.length;i++) {
				System.out.println(bus[i]);
			}
		}
	}
	
	@Test		
	void contextLoads34() {			
		List<String[]> availableBuses = obj.allBookedTicket();
		for(String[] bus:availableBuses) {
			for(int i=0;i<bus.length;i++) {
				System.out.println(bus[i]);
			}
		}
	}
	
	@Test		
	void contextLoads35() {			
		List<String[]> availableBuses = obj.searchBus("delhi","pune");
		for(String[] bus:availableBuses) {
			for(int i=0;i<bus.length;i++) {
				System.out.println(bus[i]);
			}
		}
	}

	@Test		
	void contextLoads36() {		
		Registration regis= obj.userRegistrationDetails("keshavmishra@gmail.com");
		
		Reservation reserve = obj.getReservation(52);
		
		obj.addUserTicket(regis,reserve);
	}
	
	@Test				
	void contextLoads37() {
		Reservation res = obj.getReservation(92);
		obj.addUnAuthorizedUser(res,"anand@gmail.com", "8406807728");
	}
	
	
}


